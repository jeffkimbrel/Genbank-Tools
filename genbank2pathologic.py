#! /usr/bin/env python

from Bio import SeqIO
from Bio import Entrez
import re
import os
import sys
import argparse
import datetime
import tools.gb

## MISC ########################################################################

timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
Entrez.email = "kimbrel1@llnl.gov"

## OPTIONS #####################################################################

parser = argparse.ArgumentParser(description = 'Parse Genbank file to Pathologic Format')

parser.add_argument('-g', '--genbank',
    help = "Genbank file",
    required = True)

parser.add_argument('-i', '--id',
    help = "Unique ID for PGDB and files",
    required = True)

parser.add_argument('-t', '--taxa',
    help = "Taxa string for NCBI ID",
    required = True)

parser.add_argument('-n', '--name',
    help = "ex. Genus sp",
    required = True)

parser.add_argument('-a', '--abbreviation',
    help = "ex. G. sp",
    required = True)

parser.add_argument('-s', '--strain',
    help = "Ex. P2b",
    required = True)

args = parser.parse_args()

# allowed feature types and their pathologic code gb:pf
allowedPathologicFeatureTypes = {'CDS' : 'P', 'rRNA' : 'RRNA', 'tRNA' : 'TRNA', 'misc_RNA' : 'MISC-RNA'}

## ERROR CHECK #################################################################

if len(args.id) > 10:
    print("ERROR: Unique ID has 10 characters max")
    sys.exit(2)

## OUTPUT PATH #################################################################

fullOutputPath = os.path.dirname(os.path.abspath(args.id)) + "/" + args.id.split("/")[-1]

if not os.path.exists(fullOutputPath):
    os.makedirs(fullOutputPath)

## GENETIC-ELEMENTS.DAT ########################################################

geneticElementsFileHandle = open(fullOutputPath + "/genetic-elements.dat", "w")

def writeGE(text):
    geneticElementsFileHandle.write(text + "\n")

writeGE(";;=================================================")
writeGE(";; Automatically generated by genbank2pathologic.py")
writeGE(";; " + timestamp)
writeGE(";; INPUT:" + args.genbank)
writeGE(";; OUTPUT:" + fullOutputPath)
writeGE(";;=================================================\n")

for seq_record in SeqIO.parse(args.genbank, "genbank"):

    writeGE("ID\t" + seq_record.id)
    writeGE("TYPE\t:CONTIG")
    writeGE("CIRCULAR?\tN")
    writeGE("CODON-TABLE\t11")
    writeGE("ANNOT-FILE\t" + fullOutputPath + "/" + seq_record.id + ".pf")
    writeGE("SEQ-FILE\t" + fullOutputPath + "/" + seq_record.id + ".fsa")
    writeGE("//")

geneticElementsFileHandle.close()

## FASTA FILES #################################################################

for seq_record in SeqIO.parse(args.genbank, "genbank"):
    fastaFileHandle = open(fullOutputPath + "/" + seq_record.id + ".fsa", "w")
    SeqIO.write(seq_record, fastaFileHandle, "fasta")
    fastaFileHandle.close()

## PATHOLOGIC FILES ############################################################

for seq_record in SeqIO.parse(args.genbank, "genbank"):

    pathologicFileHandle = open(fullOutputPath + "/" + seq_record.id + ".pf", "w")

    for feature in seq_record.features:
        if feature.type in allowedPathologicFeatureTypes:
            pathologicFileHandle.write("ID\t" + str(feature.qualifiers['locus_tag'][0]) + "\n")
            pathologicFileHandle.write("NAME\t" + str(feature.qualifiers['locus_tag'][0]) + "\n")

            start, end, strand = tools.gb.parseLocation(feature.location)
            pathologicFileHandle.write("STARTBASE\t" + start + "\n")
            pathologicFileHandle.write("ENDBASE\t" + end + "\n")

            if 'product' in feature.qualifiers:
                for product in feature.qualifiers['product']:
                    pathologicFileHandle.write("FUNCTION\t" + product + "\n")

            pathologicFileHandle.write("PRODUCT-TYPE\t" + allowedPathologicFeatureTypes[feature.type] + "\n")

            if 'EC_number' in feature.qualifiers:
                for ec in feature.qualifiers['EC_number']:
                    pathologicFileHandle.write("EC\t" + ec + "\n")

            pathologicFileHandle.write("//\n")
    pathologicFileHandle.close()

## ORGANISM-PARAMS.DATA ########################################################

organismFileHandle = open(fullOutputPath + "/organism-params.dat", "w")

def writeOP(text):
    organismFileHandle.write(text + "\n")

writeOP(";;=================================================")
writeOP(";; Automatically generated by genbank2pathologic.py")
writeOP(";; " + timestamp)
writeOP(";; INPUT:" + args.genbank)
writeOP(";; OUTPUT:" + fullOutputPath)
writeOP(";;=================================================\n")

# get ncbi taxa
search = Entrez.esearch(term = args.taxa, db = "taxonomy", retmode = "xml")
record = Entrez.read(search)
taxaID = record['IdList'][0]

writeOP("ID\t" + args.id)
writeOP("STORAGE\tFILE")
writeOP("SEQUENCE-SOURCE\t" + args.genbank)
writeOP("NCBI-TAXON-ID\t" + taxaID)
writeOP("NAME\t" + args.name)
writeOP("ABBREV-NAME\t" + args.abbreviation)
writeOP("STRAIN\t" + args.strain)

organismFileHandle.close()

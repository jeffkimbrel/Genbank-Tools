#! /usr/bin/env python

from Bio import SeqIO
from Bio import Entrez
import re
import os
import sys
import argparse
import datetime
import tools.gb

## MISC ########################################################################

timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
Entrez.email = "kimbrel1@llnl.gov"

## OPTIONS #####################################################################

parser = argparse.ArgumentParser(description = 'Parse Genbank file to Pathologic Format')

parser.add_argument('-g', '--genbank',
    help = "Genbank file",
    required = True)

parser.add_argument('-i', '--id',
    help = "Unique ID for PGDB and files",
    required = True)

parser.add_argument('-t', '--taxa',
    help = "Taxa string for NCBI ID",
    required = True)

args = parser.parse_args()

# allowed feature types and their pathologic code gb:pf
allowedPathologicFeatureTypes = {'CDS' : 'P', 'rRNA' : 'RRNA', 'tRNA' : 'TRNA', 'misc_RNA' : 'MISC-RNA'}

## OUTPUT PATH #################################################################

fullOutputPath = os.path.dirname(os.path.abspath(args.id)) + "/" + args.id.split("/")[-1]

if not os.path.exists(fullOutputPath):
    os.makedirs(fullOutputPath)

## GENETIC-ELEMENTS.DAT ########################################################

geneticElementsFileHandle = open(fullOutputPath + "/genetic-elements.dat", "w")


geneticElementsFileHandle.write(";;=================================================\n")
geneticElementsFileHandle.write(";; Automatically generated by genbank2pathologic.py\n")
geneticElementsFileHandle.write(";; " + timestamp + "\n")
geneticElementsFileHandle.write(";; INPUT:" + args.genbank + "\n")
geneticElementsFileHandle.write(";; OUTPUT:" + fullOutputPath + "\n")
geneticElementsFileHandle.write(";;=================================================\n\n")

for seq_record in SeqIO.parse(args.genbank, "genbank"):

    geneticElementsFileHandle.write("ID\t" + seq_record.id + "\n")
    geneticElementsFileHandle.write("TYPE\t:CONTIG\n")
    geneticElementsFileHandle.write("CIRCULAR?\tN\n")
    geneticElementsFileHandle.write("CODON-TABLE\t11\n")
    geneticElementsFileHandle.write("ANNOT-FILE\t" + fullOutputPath + "/" + seq_record.id + ".pf\n")
    geneticElementsFileHandle.write("SEQ-FILE\t" + fullOutputPath + "/" + seq_record.id + ".fsa\n")
    geneticElementsFileHandle.write("//\n")

geneticElementsFileHandle.close()

## FASTA FILES #################################################################

for seq_record in SeqIO.parse(args.genbank, "genbank"):
    fastaFileHandle = open(fullOutputPath + "/" + seq_record.id + ".fsa", "w")
    SeqIO.write(seq_record, fastaFileHandle, "fasta")
    fastaFileHandle.close()

## PATHOLOGIC FILES ############################################################

for seq_record in SeqIO.parse(args.genbank, "genbank"):

    pathologicFileHandle = open(fullOutputPath + "/" + seq_record.id + ".pf", "w")

    for feature in seq_record.features:
        if feature.type in allowedPathologicFeatureTypes:
            pathologicFileHandle.write("ID\t" + str(feature.qualifiers['locus_tag'][0]) + "\n")
            pathologicFileHandle.write("NAME\t" + str(feature.qualifiers['locus_tag'][0]) + "\n")

            start, end, strand = tools.gb.parseLocation(feature.location)
            pathologicFileHandle.write("STARTBASE\t" + start + "\n")
            pathologicFileHandle.write("ENDBASE\t" + end + "\n")

            if 'product' in feature.qualifiers:
                for product in feature.qualifiers['product']:
                    pathologicFileHandle.write("FUNCTION\t" + product + "\n")

            pathologicFileHandle.write("PRODUCT-TYPE\t" + allowedPathologicFeatureTypes[feature.type] + "\n")

            if 'EC_number' in feature.qualifiers:
                for ec in feature.qualifiers['EC_number']:
                    pathologicFileHandle.write("EC\t" + ec + "\n")

            pathologicFileHandle.write("//\n")
    pathologicFileHandle.close()

## ORGANISM-PARAMS.DATA ########################################################

organismFileHandle = open(fullOutputPath + "/organism-params.dat", "w")

organismFileHandle.write(";;=================================================\n")
organismFileHandle.write(";; Automatically generated by genbank2pathologic.py\n")
organismFileHandle.write(";; " + timestamp + "\n")
organismFileHandle.write(";; INPUT:" + args.genbank + "\n")
organismFileHandle.write(";; OUTPUT:" + fullOutputPath + "\n")
organismFileHandle.write(";;=================================================\n\n")

# get ncbi taxa
taxa = args.taxa
search = Entrez.esearch(term = taxa, db = "taxonomy", retmode = "xml")
record = Entrez.read(search)
taxaID = record['IdList'][0]

organismFileHandle.write("ID\t" + args.id + "\n")
organismFileHandle.write("STORAGE\tFILE\n")
organismFileHandle.write("SEQUENCE-SOURCE\t" + args.genbank + "\n")
organismFileHandle.write("NCBI-TAXON-ID\t" + taxaID + "\n")
organismFileHandle.write("NAME\t\n")
organismFileHandle.write("ABBREV-NAME\t\n")
organismFileHandle.write("STRAIN\t\n")

print("*** Last three fields of organism-params.dat must be manually edited! ***")

organismFileHandle.close()
